import {
  StageColumn
} from "./chunk-H6SH2KPY.js";
import "./chunk-2KRUY7IJ.js";
import {
  useGetRecentlyAssignedDocumentsQuery
} from "./chunk-JJW7UPPB.js";
import "./chunk-AEVDHNKQ.js";
import "./chunk-MZIOGCBJ.js";
import "./chunk-B2BGALUG.js";
import "./chunk-GJPVN3OZ.js";
import {
  DocumentStatus,
  RelativeTime
} from "./chunk-RCMPWTWT.js";
import "./chunk-VD336AHW.js";
import "./chunk-DTJRSEM3.js";
import "./chunk-HEYIM25Z.js";
import "./chunk-XU26IERL.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-3GKSM22F.js";
import "./chunk-SL7I7VKG.js";
import "./chunk-SFI4DT5M.js";
import "./chunk-BPAJDPWI.js";
import "./chunk-AHYONJ53.js";
import {
  Widget
} from "./chunk-OCF4EAJC.js";
import "./chunk-75XTHHTN.js";
import "./chunk-D5N7ZP4H.js";
import "./chunk-AELLCG3U.js";
import "./chunk-KJL2Q73E.js";
import "./chunk-6WYPBMTA.js";
import "./chunk-QIJGNK42.js";
import "./chunk-WUPUV3WE.js";
import "./chunk-IIOK64PU.js";
import "./chunk-3Z5Z6F6Z.js";
import "./chunk-WWKX6ITQ.js";
import "./chunk-BAC3FY2Y.js";
import "./chunk-N4JOQJJN.js";
import "./chunk-VEPEOAXJ.js";
import "./chunk-XZFENHN7.js";
import "./chunk-5FCDI6G3.js";
import "./chunk-WZRXIQZ2.js";
import "./chunk-NFRTHLZ4.js";
import "./chunk-HPR63Q7L.js";
import "./chunk-O4N3RYJL.js";
import "./chunk-IJZ5QUX6.js";
import "./chunk-TG7TDNFU.js";
import "./chunk-YBULSRNK.js";
import "./chunk-IC42C4BS.js";
import "./chunk-RQLP7FNP.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-BJA3RSE5.js";
import "./chunk-GJKETNPA.js";
import "./chunk-T2ARN7TZ.js";
import "./chunk-ND3WU7DS.js";
import "./chunk-CPFXTH2G.js";
import "./chunk-64VDBU7U.js";
import "./chunk-WL53SC6K.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-NMBTX7CN.js";
import "./chunk-U2S4VNVE.js";
import "./chunk-E4BZ3FWE.js";
import "./chunk-DWX46NZI.js";
import {
  useTracking
} from "./chunk-4SYHNX6B.js";
import "./chunk-KF4TZG24.js";
import "./chunk-3GJUYW3U.js";
import "./chunk-PQINNV4N.js";
import "./chunk-FPU5PDM4.js";
import "./chunk-D4SVJBUV.js";
import "./chunk-HC33ZSUD.js";
import "./chunk-BV6HHWZK.js";
import "./chunk-AV3MARFM.js";
import "./chunk-PWWLPW7X.js";
import "./chunk-XTRKMTCA.js";
import "./chunk-FPGLVXP5.js";
import "./chunk-V3H6CYGR.js";
import "./chunk-ZC6UOKQ5.js";
import "./chunk-HM5YIFDI.js";
import "./chunk-QOUV5O5E.js";
import {
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-KR7BY75X.js";
import "./chunk-7K6WC7UG.js";
import {
  Link,
  useNavigate
} from "./chunk-RKN75MQZ.js";
import "./chunk-AWHRF5BE.js";
import {
  ForwardRef$N
} from "./chunk-EXVE46AP.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt
} from "./chunk-3LBZKDTB.js";
import "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/review-workflows/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var RecentDocumentsTable = ({ documents, type }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome", {
      entryType: type
    });
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 6,
    rowCount: (documents == null ? void 0 : documents.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(document),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: document.title,
              variant: "omega",
              textColor: "neutral800",
              children: document.title
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              variant: "omega",
              textColor: "neutral600",
              children: document.kind === "singleType" ? formatMessage({
                id: "content-manager.widget.last-edited.single-type",
                defaultMessage: "Single-Type"
              }) : formatMessage({
                id: document.contentTypeDisplayName,
                defaultMessage: document.contentTypeDisplayName
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, {
                status: document.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              textColor: "neutral600",
              children: (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(document.updatedAt)
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(StageColumn, {
              strapi_stage: document.strapi_stage
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(document),
                onClick: () => trackUsage("willEditEntryFromHome", {
                  entryType: type
                }),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$N, {})
              })
            })
          })
        ]
      }, document.documentId))
    })
  });
};
var AssignedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentlyAssignedDocumentsQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "review-workflows.widget.assigned.no-data",
        defaultMessage: "No entries"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, {
    documents: data,
    type: "assigned"
  });
};
export {
  AssignedWidget
};
//# sourceMappingURL=Widgets-LIN72MPT.js.map
